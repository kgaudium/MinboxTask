namespace MindboxTask;

class Program
{
    // Для реализации нужного функционала можно было бы использовать, например, абстрактный класс Shape.
    // Но это вводило бы определённые ограничения, например, если нужно будет создать класс
    // который не является фигурой, но у него может быть высчитана площадь, мы бы не смоги 
    // использовать наследование (к примеру, класс Sprite, это вроде не фигура, но иногда нужна площадь).
    //
    // К тому же, не совсем понятно зачем создавать класс Фигуры, если в нём будет только метод подсчёта площади,
    // ведь фигура обладает и другими свойствами, не только площадью.
    //
    // Поэтому было принято решение создать интерфейс IHasArea, его название будет полностью отражать его
    // функционал, а также это избавит от проблемы с наследованием, ведь реализвация интерфейса не так сильно
    // логически связывает классы.
    //
    // Ну и это позволит соблюсти требования к заданию, а именно "Легкость добавления других фигур" и
    // "Вычисление площади фигуры без знания типа фигуры в compile-time"
    
    
    // Также, в ситуации если нам не нужно создавать объекты классов, можно было бы воспользоваться перечислением.
    // Тогда в классе AreaCalculator будет метод, который принимает значение enum'а, и данные о фигуре.
    // Но будет вопрос как передавать данные о фигуре: можно передавать словарь с определёнными ключами,
    // но тогда имена этих ключей будут как бы захардкожены (можно сдлеать ещё один enum, в котором будут такие
    // значения ключей такие, как radius, sideA, sideB ... )
    // Либо можно создать класс, который хранил бы информацию о фигурах, но в этом есть смысл только если мы будем
    // создавать объекты этого класса только непосредственно при вызове метода вычисления площади, ведь иначе в чем 
    // разница с просто объктами фигур.
    
    static void Main(string[] args)
    {
        
    }
}